/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è —Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤—Å–µ—Ö —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤
 */

import { CharacteristicEntity } from '@/entities/characteristic/index.js';
import { CharacteristicGenerationService } from '@/shared/lib/characteristic-generation.js';
import { query } from '@/shared/database/connection.js';

const generationService = new CharacteristicGenerationService();

async function regenerateAllCharacteristics() {
  console.log('üîÑ –ù–∞—á–∏–Ω–∞–µ–º —Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏—é –≤—Å–µ—Ö —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫...\n');

  try {
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤
    const employeesResult = await query('SELECT id, first_name, last_name FROM employees ORDER BY last_name, first_name');
    const employees = employeesResult.rows;

    console.log(`üìä –ù–∞–π–¥–µ–Ω–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤: ${employees.length}\n`);

    let updated = 0;
    let skipped = 0;
    let errors = 0;

    for (const employee of employees) {
      const fullName = `${employee.first_name} ${employee.last_name}`;
      
      try {
        console.log(`‚è≥ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º: ${fullName}...`);
        
        // –ü–æ–ª—É—á–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫—É
        const existing = await CharacteristicEntity.findByEmployeeId(employee.id);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
        const { context, dataRichness } = await generationService.computeContextFingerprint(employee.id);
        
        if (dataRichness.score === 0) {
          console.log(`  ‚ö†Ô∏è  –ü—Ä–æ–ø—É—Å–∫–∞–µ–º ${fullName} - –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö`);
          skipped++;
          continue;
        }
        
        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—É—é —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫—É
        const result = await generationService.generateCharacteristic(
          employee.id,
          existing?.content
        );
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º
        await CharacteristicEntity.upsert(employee.id, result);
        
        console.log(`  ‚úÖ ${fullName} - –æ–±–Ω–æ–≤–ª–µ–Ω–æ (–Ω–∞–ø–æ–ª–Ω–µ–Ω–Ω–æ—Å—Ç—å: ${dataRichness.score}/100)`);
        updated++;
        
        // –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏ –∫ LLM
        await new Promise(resolve => setTimeout(resolve, 500));
        
      } catch (error) {
        console.error(`  ‚ùå –û—à–∏–±–∫–∞ –¥–ª—è ${fullName}:`, error instanceof Error ? error.message : error);
        errors++;
      }
    }

    console.log('\n' + '='.repeat(60));
    console.log('üìà –ò—Ç–æ–≥–∏:');
    console.log(`  ‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ: ${updated}`);
    console.log(`  ‚ö†Ô∏è  –ü—Ä–æ–ø—É—â–µ–Ω–æ (–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö): ${skipped}`);
    console.log(`  ‚ùå –û—à–∏–±–æ–∫: ${errors}`);
    console.log('='.repeat(60));

  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
    process.exit(1);
  }

  process.exit(0);
}

// –ó–∞–ø—É—Å–∫
regenerateAllCharacteristics();


