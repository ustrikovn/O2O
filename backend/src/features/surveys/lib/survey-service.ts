/**
 * –°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –æ–ø—Ä–æ—Å–∞–º–∏
 */

import { randomUUID } from 'crypto';
import { 
  Survey, 
  SurveyResult, 
  CreateSurveyDto, 
  UpdateSurveyDto,
  StartSurveyDto,
  SubmitAnswerDto,
  NextQuestionResponse,
  SurveyStats,
  QuestionAnswer
} from '../../../shared/types/survey.js';
import { SurveyEntity, SurveyResultEntity } from '../../../entities/survey/index.js';
import { runDiscLLMForResult } from './interpreters/disc-service.js';
import { runBigFiveSummaryForResult } from './interpreters/bigfive-service.js';
import { SurveyRepository } from './survey-repository.js';
import { ApiError } from '../../../shared/api/middleware.js';

export class SurveyService {
  private surveyRepository: SurveyRepository;

  constructor(surveyRepository: SurveyRepository) {
    this.surveyRepository = surveyRepository;
  }

  /**
   * –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –æ–ø—Ä–æ—Å
   */
  async createSurvey(data: CreateSurveyDto): Promise<Survey> {
    const surveyId = randomUUID();
    
    const survey: Survey = {
      id: surveyId,
      title: data.title,
      description: data.description || undefined,
      questions: data.questions,
      logic: data.logic,
      settings: data.settings || undefined,
      metadata: {
        ...data.metadata,
        createdAt: new Date(),
        updatedAt: new Date()
      },
      isActive: true
    };

    // –í–∞–ª–∏–¥–∏—Ä—É–µ–º –æ–ø—Ä–æ—Å —á–µ—Ä–µ–∑ entity
    const surveyEntity = new SurveyEntity(survey);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å—Ç–∞—Ä—Ç–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    const startQuestion = surveyEntity.getStartQuestion();
    if (!startQuestion) {
      throw new ApiError(400, '–°—Ç–∞—Ä—Ç–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω');
    }

    return await this.surveyRepository.create(survey);
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –æ–ø—Ä–æ—Å –ø–æ ID
   */
  async getSurvey(id: string): Promise<Survey> {
    const survey = await this.surveyRepository.findById(id);
    if (!survey) {
      throw new ApiError(404, '–û–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω');
    }
    return survey;
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ –æ–ø—Ä–æ—Å—ã
   */
  async getActiveSurveys(category?: string): Promise<Survey[]> {
    return await this.surveyRepository.findActive(category);
  }

  /**
   * –û–±–Ω–æ–≤–∏—Ç—å –æ–ø—Ä–æ—Å
   */
  async updateSurvey(id: string, data: UpdateSurveyDto): Promise<Survey> {
    const existingSurvey = await this.getSurvey(id);
    
    const updatedSurvey: Survey = {
      ...existingSurvey,
      ...data,
      metadata: {
        ...existingSurvey.metadata,
        ...data.metadata,
        updatedAt: new Date()
      }
    };

    // –í–∞–ª–∏–¥–∏—Ä—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –æ–ø—Ä–æ—Å
    const surveyEntity = new SurveyEntity(updatedSurvey);
    if (updatedSurvey.questions && updatedSurvey.logic) {
      const startQuestion = surveyEntity.getStartQuestion();
      if (!startQuestion) {
        throw new ApiError(400, '–°—Ç–∞—Ä—Ç–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–º –æ–ø—Ä–æ—Å–µ');
      }
    }

    return await this.surveyRepository.update(id, updatedSurvey);
  }

  /**
   * –î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –æ–ø—Ä–æ—Å
   */
  async deactivateSurvey(id: string): Promise<void> {
    await this.getSurvey(id); // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ
    await this.surveyRepository.update(id, { isActive: false });
  }

  /**
   * –£–¥–∞–ª–∏—Ç—å –æ–ø—Ä–æ—Å
   */
  async deleteSurvey(id: string): Promise<void> {
    await this.getSurvey(id); // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ
    await this.surveyRepository.delete(id);
  }

  /**
   * –ù–∞—á–∞—Ç—å –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ –æ–ø—Ä–æ—Å–∞
   */
  async startSurvey(data: StartSurveyDto): Promise<{ resultId: string; firstQuestion: NextQuestionResponse }> {
    const survey = await this.getSurvey(data.surveyId);
    if (!survey.isActive) {
      throw new ApiError(400, '–û–ø—Ä–æ—Å –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω');
    }

    const surveyEntity = new SurveyEntity(survey);
    const firstQuestion = surveyEntity.getStartQuestion();
    
    if (!firstQuestion) {
      throw new ApiError(500, '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å –æ–ø—Ä–æ—Å–∞');
    }

    const resultId = randomUUID();
    const result: SurveyResult = {
      id: resultId,
      surveyId: data.surveyId,
      employeeId: data.employeeId || undefined,
      meetingId: data.meetingId || undefined,
      answers: [],
      status: 'started',
      startedAt: new Date()
    };

    await this.surveyRepository.createResult(result);

    const response: NextQuestionResponse = {
      question: firstQuestion,
      isCompleted: false,
      progress: surveyEntity.calculateProgress([])
    };

    return { resultId, firstQuestion: response };
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å
   */
  async submitAnswer(data: SubmitAnswerDto): Promise<NextQuestionResponse> {
    const result = await this.surveyRepository.findResultById(data.resultId);
    if (!result) {
      throw new ApiError(404, '–†–µ–∑—É–ª—å—Ç–∞—Ç –æ–ø—Ä–æ—Å–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω');
    }

    if (result.status === 'completed') {
      throw new ApiError(400, '–û–ø—Ä–æ—Å —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω');
    }

    const survey = await this.getSurvey(result.surveyId);
    const surveyEntity = new SurveyEntity(survey);
    const resultEntity = new SurveyResultEntity(result);

    // –í–∞–ª–∏–¥–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
    const validation = surveyEntity.validateAnswer(data.questionId, data.value);
    if (!validation.isValid) {
      throw new ApiError(400, validation.errors.join(', '));
    }

    // –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –æ—Ç–≤–µ—Ç–∞
    const answer: QuestionAnswer = {
      questionId: data.questionId,
      questionType: surveyEntity.getQuestion(data.questionId)!.type,
      value: data.value,
      timestamp: new Date()
    };

    // –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
    resultEntity.addAnswer(answer);
    
    // –ó–∞–∫—Ä—ã—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã –±–æ–ª—å—à–µ –Ω–µ –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∏—Ä—É—é—Ç—Å—è –Ω–∞ –±—ç–∫–µ–Ω–¥–µ ‚Äî
    // —Ñ—Ä–æ–Ω—Ç –ø–µ—Ä–µ–¥–∞–µ—Ç —Ñ–∏–Ω–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è (–æ–¥–Ω–∞ –∏–ª–∏ –¥–≤–µ –±—É–∫–≤—ã),
    // –±—ç–∫–µ–Ω–¥ —Ç–æ–ª—å–∫–æ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –æ—Ç–≤–µ—Ç –∫–∞–∫ –µ—Å—Ç—å.

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å
    console.log(`üîç –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å –ø–æ—Å–ª–µ ${data.questionId} —Å –æ—Ç–≤–µ—Ç–æ–º:`, data.value);
    const nextQuestion = surveyEntity.getNextQuestion(
      data.questionId, 
      data.value, 
      resultEntity.answers
    );
    console.log(`üéØ –°–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å:`, nextQuestion?.id || 'null (–∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ)');

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –æ–ø—Ä–æ—Å–∞
    const isCompleted = !nextQuestion || surveyEntity.isCompleted(data.questionId, resultEntity.answers);
    console.log(`‚úÖ –û–ø—Ä–æ—Å –∑–∞–≤–µ—Ä—à–µ–Ω:`, isCompleted);
    
    if (isCompleted) {
      // –ó–∞–≤–µ—Ä—à–∞–µ–º –æ–ø—Ä–æ—Å
      resultEntity.complete();
      
      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥, —á—Ç–æ LLM –æ–±—Ä–∞–±–æ—Ç–∫–∞ –µ—â–µ –Ω–µ –Ω–∞—á–∞–ª–∞—Å—å
      if (!resultEntity.metadata) {
        resultEntity.metadata = {};
      }
      resultEntity.metadata.llmProcessing = 'pending';
    }

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –°–†–ê–ó–£ (–±–µ–∑ –æ–∂–∏–¥–∞–Ω–∏—è LLM)
    await this.surveyRepository.updateResult(data.resultId, {
      answers: resultEntity.answers,
      status: resultEntity.status,
      completedAt: resultEntity.completedAt || undefined,
      metadata: resultEntity.metadata || undefined
    });

    // –ï—Å–ª–∏ –æ–ø—Ä–æ—Å –∑–∞–≤–µ—Ä—à–µ–Ω ‚Äî –∑–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É (Big Five summary) –∏ LLM DISC –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
    if (isCompleted) {
      // –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –≤ —Ñ–æ–Ω–µ –±–µ–∑ await
      this.processLLMInBackground(data.resultId, survey, resultEntity).catch(error => {
        console.error('Background LLM processing failed:', error);
      });
    }

    const response: NextQuestionResponse = {
      question: nextQuestion || undefined,
      isCompleted,
      progress: surveyEntity.calculateProgress(resultEntity.answers)
    };

    return response;
  }

  /**
   * –§–æ–Ω–æ–≤–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ LLM –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –æ–ø—Ä–æ—Å–∞
   */
  private async processLLMInBackground(resultId: string, survey: Survey, resultEntity: SurveyResultEntity): Promise<void> {
    try {
      console.log(`ü§ñ –ù–∞—á–∏–Ω–∞–µ–º —Ñ–æ–Ω–æ–≤—É—é LLM –æ–±—Ä–∞–±–æ—Ç–∫—É –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ ${resultId}`);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ "–≤ –ø—Ä–æ—Ü–µ—Å—Å–µ"
      await this.surveyRepository.updateResult(resultId, {
        metadata: { ...resultEntity.metadata, llmProcessing: 'in_progress' }
      });
      
      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø—ã –æ–ø—Ä–æ—Å–æ–≤ –ø–æ —Ç—ç–≥–∞–º/ID –≤–æ–ø—Ä–æ—Å–æ–≤
      const isBigFiveSurvey = (
        Array.isArray(survey?.metadata?.tags) && survey.metadata!.tags!.includes('big-five')
      ) || survey.questions.some(q => ['op','co','ex','ag','ne'].some(prefix => String(q.id || '').startsWith(prefix)));
      const isDiscSurvey = survey.questions.some(q => Array.isArray(q.tags) && q.tags!.some(t => String(t).startsWith('disc:')));

      // 1) –°—á–∏—Ç–∞–µ–º Big Five summary –¢–û–õ–¨–ö–û –¥–ª—è Big Five –æ–ø—Ä–æ—Å–æ–≤
      if (isBigFiveSurvey) {
        try {
          await runBigFiveSummaryForResult({ survey, resultEntity });
        } catch (e) {
          console.error('Big Five summary failed:', e);
        }
      }

      // 2) –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ (bigFive)
      await this.surveyRepository.updateResult(resultId, {
        metadata: { ...resultEntity.metadata }
      });

      // 3) –í—ã–ø–æ–ª–Ω—è–µ–º LLM –æ–±—Ä–∞–±–æ—Ç–∫—É DISC –¢–û–õ–¨–ö–û –¥–ª—è DISC-–æ–ø—Ä–æ—Å–æ–≤
      if (isDiscSurvey) {
        await runDiscLLMForResult({ survey, resultEntity });
      }
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å –¥–∞–Ω–Ω—ã–º–∏ LLM –∏ —Å—Ç–∞—Ç—É—Å–æ–º "–∑–∞–≤–µ—Ä—à–µ–Ω–æ"
      await this.surveyRepository.updateResult(resultId, {
        metadata: { ...resultEntity.metadata, llmProcessing: 'completed' }
      });
      
      console.log(`‚úÖ –§–æ–Ω–æ–≤–∞—è LLM –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ ${resultId}`);
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ —Ñ–æ–Ω–æ–≤–æ–π LLM –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ ${resultId}:`, error);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ "–æ—à–∏–±–∫–∞"
      await this.surveyRepository.updateResult(resultId, {
        metadata: { ...resultEntity.metadata, llmProcessing: 'failed', llmError: String(error) }
      });
    }
  }

  /**
   * –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–≤–µ—Ä—à–∏—Ç—å –æ–ø—Ä–æ—Å
   */
  async completeSurvey(resultId: string): Promise<NextQuestionResponse> {
    const result = await this.surveyRepository.findResultById(resultId);
    if (!result) {
      throw new ApiError(404, '–†–µ–∑—É–ª—å—Ç–∞—Ç –æ–ø—Ä–æ—Å–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω');
    }

    if (result.status === 'completed') {
      throw new ApiError(400, '–û–ø—Ä–æ—Å —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω');
    }

    const survey = await this.getSurvey(result.surveyId);
    const surveyEntity = new SurveyEntity(survey);
    const resultEntity = new SurveyResultEntity(result);

    // –ó–∞–≤–µ—Ä—à–∞–µ–º –æ–ø—Ä–æ—Å
    resultEntity.complete();

    // –ü—Ä–æ–±—É–µ–º –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–∫—Ä—ã—Ç—ã–µ –æ—Ç–≤–µ—Ç—ã DISC —á–µ—Ä–µ–∑ LLM –ø—Ä–∏ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
    try {
      const isDiscSurvey = survey.questions.some(q => Array.isArray(q.tags) && q.tags!.some(t => String(t).startsWith('disc:')));
      if (isDiscSurvey) {
        await runDiscLLMForResult({ survey, resultEntity });
      }
    } catch (llmError) {
      console.error('LLM DISC interpretation failed (complete):', llmError);
    }

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    await this.surveyRepository.updateResult(resultId, {
      status: resultEntity.status,
      completedAt: resultEntity.completedAt || undefined,
      metadata: resultEntity.metadata || undefined
    });

    return {
      question: undefined,
      isCompleted: true,
      progress: surveyEntity.calculateProgress(resultEntity.answers)
    };
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ–ø—Ä–æ—Å–∞
   */
  async getSurveyResult(resultId: string): Promise<SurveyResult> {
    const result = await this.surveyRepository.findResultById(resultId);
    if (!result) {
      throw new ApiError(404, '–†–µ–∑—É–ª—å—Ç–∞—Ç –æ–ø—Ä–æ—Å–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω');
    }
    return result;
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–ø—Ä–æ—Å–∞ –¥–ª—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
   */
  async getEmployeeResults(employeeId: string, surveyId?: string): Promise<SurveyResult[]> {
    return await this.surveyRepository.findResultsByEmployee(employeeId, surveyId);
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–ø—Ä–æ—Å–∞ –¥–ª—è –≤—Å—Ç—Ä–µ—á–∏
   */
  async getMeetingResults(meetingId: string): Promise<SurveyResult[]> {
    return await this.surveyRepository.findResultsByMeeting(meetingId);
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –æ–ø—Ä–æ—Å—É
   */
  async getSurveyStatistics(surveyId: string): Promise<SurveyStats> {
    await this.getSurvey(surveyId); // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –æ–ø—Ä–æ—Å–∞
    return await this.surveyRepository.getStatistics(surveyId);
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–ø—Ä–æ—Å–∞
   */
  async getSurveyResults(
    surveyId: string, 
    status?: SurveyResult['status'],
    limit?: number,
    offset?: number
  ): Promise<{ results: SurveyResult[]; total: number }> {
    await this.getSurvey(surveyId); // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –æ–ø—Ä–æ—Å–∞
    return await this.surveyRepository.findResultsBySurvey(surveyId, status, limit, offset);
  }

  /**
   * –ù–∞–π—Ç–∏ –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –æ–ø—Ä–æ—Å—ã –¥–ª—è –æ—á–∏—Å—Ç–∫–∏
   */
  async findAbandonedResults(olderThanHours: number = 24): Promise<SurveyResult[]> {
    return await this.surveyRepository.findAbandonedResults(olderThanHours);
  }

  /**
   * –û—Ç–º–µ—Ç–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∫–∞–∫ –∑–∞–±—Ä–æ—à–µ–Ω–Ω—ã–π
   */
  async markAsAbandoned(resultId: string): Promise<void> {
    const result = await this.getSurveyResult(resultId);
    if (result.status !== 'completed') {
      await this.surveyRepository.updateResult(resultId, { 
        status: 'abandoned' 
      });
    }
  }

  /**
   * –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ–≥–æ –æ–ø—Ä–æ—Å–∞
   */
  async resumeSurvey(resultId: string): Promise<NextQuestionResponse> {
    const result = await this.getSurveyResult(resultId);
    
    if (result.status === 'completed') {
      throw new ApiError(400, '–û–ø—Ä–æ—Å —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω');
    }

    if (result.status === 'abandoned') {
      throw new ApiError(400, '–û–ø—Ä–æ—Å –±—ã–ª –æ—Ç–º–µ–Ω–µ–Ω');
    }

    const survey = await this.getSurvey(result.surveyId);
    const surveyEntity = new SurveyEntity(survey);

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—É—â–∏–π –≤–æ–ø—Ä–æ—Å
    let currentQuestion: any = null;
    
    if (result.answers.length === 0) {
      // –ï—Å–ª–∏ –Ω–µ—Ç –æ—Ç–≤–µ—Ç–æ–≤, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å
      currentQuestion = surveyEntity.getStartQuestion();
    } else {
      // –ü–æ–ª—É—á–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å –ø–æ—Å–ª–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ—Ç–≤–µ—Ç–∞
      const lastAnswer = result.answers[result.answers.length - 1];
      if (lastAnswer) {
        currentQuestion = surveyEntity.getNextQuestion(
          lastAnswer.questionId,
          lastAnswer.value,
          result.answers
        );
      }
    }

    const isCompleted = !currentQuestion;

    return {
      question: currentQuestion || undefined,
      isCompleted,
      progress: surveyEntity.calculateProgress(result.answers)
    };
  }
}
