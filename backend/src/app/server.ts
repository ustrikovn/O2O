
/**
 * –ì–ª–∞–≤–Ω—ã–π —Ñ–∞–π–ª –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
 */

import express from 'express';
import cors from 'cors';
import helmet from 'helmet';
import compression from 'compression';
import rateLimit from 'express-rate-limit';
import dotenv from 'dotenv';
import path from 'path';
import { fileURLToPath } from 'url';

import { connectDatabase } from '@/shared/database/connection.js';
import { getServerConfig } from '@/shared/config/server.js';
import { employeeRoutes } from '@/features/employees/index.js';
import { meetingsRoutes } from '@/features/meetings/index.js';
import { surveyRoutes } from '@/features/surveys/index.js';
import agreementRoutes from '@/features/agreements/api/routes.js';
import { TextGenerationService } from '@/shared/llm/textService.js';

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–ª—è ES modules
const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

// –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
dotenv.config();

const app = express();
const config = getServerConfig();

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ rate limiting
const limiter = rateLimit({
  windowMs: 15 * 60 * 1000, // 15 –º–∏–Ω—É—Ç
  max: config.apiRateLimit, // –º–∞–∫—Å–∏–º—É–º –∑–∞–ø—Ä–æ—Å–æ–≤
  message: { error: '–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ' }
});

// Middleware  
app.use(helmet({
  crossOriginResourcePolicy: { policy: "cross-origin" },
  contentSecurityPolicy: {
    directives: {
      defaultSrc: ["'self'"],
      baseUri: ["'self'"],
      fontSrc: ["'self'", "https:", "data:"],
      formAction: ["'self'"],
      frameAncestors: ["'self'"],
      // –†–∞–∑—Ä–µ—à–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Å –ª—é–±—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–æ–º
      imgSrc: ["*", "data:", "'self'"],
      objectSrc: ["'none'"],
      scriptSrc: ["'self'"],
      scriptSrcAttr: ["'none'"],
      styleSrc: ["'self'", "https:", "'unsafe-inline'"],
      upgradeInsecureRequests: []
    }
  }
}));
app.use(compression());
app.use(limiter);
app.use(cors({
  origin: config.corsOrigins,
  credentials: true
}));
app.use(express.json({ limit: '10mb' }));
app.use(express.urlencoded({ extended: true, limit: '10mb' }));

// –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã –¥–ª—è –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π —Å CORS –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏
app.use('/uploads', (req, res, next) => {
  // –î–æ–±–∞–≤–ª—è–µ–º CORS –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤
  res.header('Access-Control-Allow-Origin', '*');
  res.header('Access-Control-Allow-Methods', 'GET');
  res.header('Access-Control-Allow-Headers', 'Content-Type');
  next();
}, express.static(path.join(process.cwd(), 'uploads')));

// –ú–∞—Ä—à—Ä—É—Ç—ã API (–≤–∞–∂–µ–Ω –ø–æ—Ä—è–¥–æ–∫: —Å–Ω–∞—á–∞–ª–∞ –æ–±—â–∏–µ /api –º–∞—Ä—à—Ä—É—Ç—ã –¥–æ–≥–æ–≤–æ—Ä–µ–Ω–Ω–æ—Å—Ç–µ–π, –ø–æ—Ç–æ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ)
app.use('/api', agreementRoutes); // –ù–æ–≤—ã–µ API –¥–ª—è –¥–æ–≥–æ–≤–æ—Ä–µ–Ω–Ω–æ—Å—Ç–µ–π (–≤ —Ç.—á. /api/meetings/:id/agreements)
app.use('/api/employees', employeeRoutes);
app.use('/api/meetings', meetingsRoutes);
app.use('/api/surveys', surveyRoutes);

// –ü—Ä–∏–º–µ—Ä —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –º–∞—Ä—à—Ä—É—Ç–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ Bothub
app.post('/api/llm/test', async (req, res) => {
  try {
    const { prompt, context, system, model } = req.body || {};
    const service = new TextGenerationService();
    const result = await service.generateText({ prompt: prompt || '–°–∫–∞–∂–∏ –ø—Ä–∏–≤–µ—Ç!', context, system, model });
    res.json({ success: true, result });
  } catch (error: any) {
    res.status(500).json({ success: false, error: error?.message || 'LLM error' });
  }
});

// –ë–∞–∑–æ–≤—ã–π –º–∞—Ä—à—Ä—É—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–∏—Å–∞
app.get('/api/health', (req, res) => {
  res.json({ 
    status: 'OK', 
    timestamp: new Date().toISOString(),
    version: '1.0.0'
  });
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ 404 –æ—à–∏–±–æ–∫
app.use('*', (req, res) => {
  res.status(404).json({ 
    error: '–ú–∞—Ä—à—Ä—É—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω', 
    path: req.originalUrl 
  });
});

// –ì–ª–æ–±–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
app.use((err: any, req: express.Request, res: express.Response, next: express.NextFunction) => {
  console.error('–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞:', err);
  
  res.status(err.status || 500).json({
    error: config.nodeEnv === 'production' 
      ? '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' 
      : err.message,
    ...(config.nodeEnv !== 'production' && { stack: err.stack })
  });
});

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
async function startServer(): Promise<void> {
  try {
    // –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    await connectDatabase();
    console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
    
    // –ó–∞–ø—É—Å–∫ HTTP —Å–µ—Ä–≤–µ—Ä–∞
    app.listen(config.port, () => {
      console.log(`üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${config.port}`);
      console.log(`üìä Health check: http://localhost:${config.port}/api/health`);
      console.log(`üîß Environment: ${config.nodeEnv}`);
    });
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞:', error);
    process.exit(1);
  }
}

// Graceful shutdown
process.on('SIGTERM', () => {
  console.log('üîÑ –ü–æ–ª—É—á–µ–Ω SIGTERM, –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...');
  process.exit(0);
});

process.on('SIGINT', () => {
  console.log('üîÑ –ü–æ–ª—É—á–µ–Ω SIGINT, –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...');
  process.exit(0);
});

startServer();
