/**
 * –ú–æ–¥–µ–ª—å —Å—É—â–Ω–æ—Å—Ç–∏ Survey
 */

import { Survey, SurveyResult, Question, QuestionAnswer } from '../../../shared/types/survey.js';

export class SurveyEntity implements Survey {
  id: string;
  title: string;
  description?: string | undefined;
  metadata?: Survey['metadata'] | undefined;
  questions: Question[];
  logic: Survey['logic'];
  settings?: Survey['settings'] | undefined;
  isActive?: boolean | undefined;

  constructor(data: Survey) {
    this.id = data.id;
    this.title = data.title;
    this.description = data.description;
    this.metadata = data.metadata;
    this.questions = data.questions;
    this.logic = data.logic;
    this.settings = data.settings;
    this.isActive = data.isActive ?? true;
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –ø–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å –æ–ø—Ä–æ—Å–∞
   */
  getStartQuestion(): Question | null {
    return this.questions.find(q => q.id === this.logic.startQuestion) || null;
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –≤–æ–ø—Ä–æ—Å –ø–æ ID
   */
  getQuestion(questionId: string): Question | null {
    return this.questions.find(q => q.id === questionId) || null;
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ–∫—É—â–µ–≥–æ –æ—Ç–≤–µ—Ç–∞
   */
  getNextQuestion(
    currentQuestionId: string,
    answer: any,
    allAnswers: QuestionAnswer[] = []
  ): Question | null {
    console.log(`üîÑ getNextQuestion: ${currentQuestionId}, –æ—Ç–≤–µ—Ç:`, answer);
    const currentQuestion = this.getQuestion(currentQuestionId);
    if (!currentQuestion) {
      console.log(`‚ùå –¢–µ–∫—É—â–∏–π –≤–æ–ø—Ä–æ—Å ${currentQuestionId} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
      return null;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ª–æ–≤–Ω—É—é –ª–æ–≥–∏–∫—É
    if (currentQuestion.conditions) {
      console.log(`üß† –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ª–æ–≤–Ω—É—é –ª–æ–≥–∏–∫—É –¥–ª—è ${currentQuestionId}`);
      for (const condition of currentQuestion.conditions) {
        const conditionMet = this.evaluateCondition(condition.if, answer, allAnswers);
        console.log(`üé≤ –£—Å–ª–æ–≤–∏–µ ${JSON.stringify(condition.if)} = ${conditionMet}`);
        if (conditionMet) {
          if (condition.then.end) {
            console.log(`üèÅ –£—Å–ª–æ–≤–∏–µ —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –æ–ø—Ä–æ—Å–∞`);
            return null; // –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –æ–ø—Ä–æ—Å–∞
          }
          if (condition.then.nextQuestion) {
            console.log(`‚û°Ô∏è –£—Å–ª–æ–≤–∏–µ —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å: ${condition.then.nextQuestion}`);
            return this.getQuestion(condition.then.nextQuestion);
          }
        }
      }
    }

    // –î–ª—è single-choice –≤–æ–ø—Ä–æ—Å–æ–≤ –ø—Ä–æ–≤–µ—Ä—è–µ–º nextQuestion –≤ –æ–ø—Ü–∏—è—Ö
    if (currentQuestion.type === 'single-choice') {
      console.log(`üîò –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–ø—Ü–∏–∏ single-choice –¥–ª—è –∑–Ω–∞—á–µ–Ω–∏—è: ${answer}`);
      const selectedOption = currentQuestion.options.find(opt => opt.value === answer);
      if (selectedOption?.nextQuestion) {
        console.log(`‚û°Ô∏è –û–ø—Ü–∏—è —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å: ${selectedOption.nextQuestion}`);
        return this.getQuestion(selectedOption.nextQuestion);
      }
    }

    // –ï—Å–ª–∏ –µ—Å—Ç—å nextQuestion –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    if (currentQuestion.nextQuestion) {
      console.log(`‚û°Ô∏è –ü–µ—Ä–µ—Ö–æ–¥ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –Ω–∞: ${currentQuestion.nextQuestion}`);
      return this.getQuestion(currentQuestion.nextQuestion);
    }

    // –ü–æ–ª—É—á–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å –ø–æ –ø–æ—Ä—è–¥–∫—É
    const currentIndex = this.questions.findIndex(q => q.id === currentQuestionId);
    if (currentIndex >= 0 && currentIndex < this.questions.length - 1) {
      const nextQuestion = this.questions[currentIndex + 1];
      console.log(`‚û°Ô∏è –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –ø–æ –ø–æ—Ä—è–¥–∫—É: ${nextQuestion?.id}`);
      return nextQuestion || null;
    }

    console.log(`üèÅ –î–æ—Å—Ç–∏–≥–Ω—É—Ç –∫–æ–Ω–µ—Ü –æ–ø—Ä–æ—Å–∞`);
    return null; // –ö–æ–Ω–µ—Ü –æ–ø—Ä–æ—Å–∞
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –∑–∞–≤–µ—Ä—à–µ–Ω –ª–∏ –æ–ø—Ä–æ—Å
   */
  isCompleted(currentQuestionId: string, answers: QuestionAnswer[]): boolean {
    return this.logic.endPoints.includes(currentQuestionId) || 
           this.getNextQuestion(currentQuestionId, answers[answers.length - 1]?.value, answers) === null;
  }


  /**
   * –í—ã—á–∏—Å–ª–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è
   */
  calculateProgress(answers: QuestionAnswer[]): { current: number; total: number; percentage: number } {
    // –î–ª—è –æ–ø—Ä–æ—Å–æ–≤ —Å –≤–µ—Ç–≤–ª–µ–Ω–∏—è–º–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ü–µ–Ω–æ—á–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å
    // –°—á–∏—Ç–∞–µ–º —á—Ç–æ —Å—Ä–µ–¥–Ω–∏–π –ø—É—Ç—å —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç 60% –æ—Ç –≤—Å–µ—Ö –≤–æ–ø—Ä–æ—Å–æ–≤
    const totalQuestions = this.questions.length;
    const estimatedPath = Math.max(3, Math.ceil(totalQuestions * 0.6));
    
    const current = answers.length;
    const total = Math.max(current + 1, estimatedPath); // –ú–∏–Ω–∏–º—É–º —Ç–µ–∫—É—â–∏–π + 1
    const percentage = Math.min(95, Math.round((current / total) * 100)); // –ú–∞–∫—Å–∏–º—É–º 95% –¥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è

    return { current, total, percentage };
  }

  /**
   * –í–∞–ª–∏–¥–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å
   */
  validateAnswer(questionId: string, value: any): { isValid: boolean; errors: string[] } {
    const question = this.getQuestion(questionId);
    if (!question) {
      return { isValid: false, errors: ['–í–æ–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω'] };
    }

    const errors: string[] = [];

    // –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ
    if (question.validation?.required && (value === null || value === undefined || value === '')) {
      errors.push(question.validation.errorMessage || '–ü–æ–ª–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è');
      return { isValid: false, errors };
    }

    // –í–∞–ª–∏–¥–∞—Ü–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –≤–æ–ø—Ä–æ—Å–∞
    switch (question.type) {
      case 'single-choice':
        if (value && !question.options.some(opt => opt.value === value)) {
          errors.push('–ù–µ–¥–æ–ø—É—Å—Ç–∏–º–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ');
        }
        break;

      case 'multiple-choice':
        if (Array.isArray(value)) {
          const validValues = question.options.map(opt => opt.value);
          const invalidValues = value.filter(v => !validValues.includes(v));
          if (invalidValues.length > 0) {
            errors.push('–ù–µ–∫–æ—Ç–æ—Ä—ã–µ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã');
          }

          if (question.validation?.minSelections && value.length < question.validation.minSelections) {
            errors.push(`–ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã–±–æ—Ä–æ–≤: ${question.validation.minSelections}`);
          }

          if (question.validation?.maxSelections && value.length > question.validation.maxSelections) {
            errors.push(`–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã–±–æ—Ä–æ–≤: ${question.validation.maxSelections}`);
          }
        } else if (value !== null && value !== undefined) {
          errors.push('–û–∂–∏–¥–∞–µ—Ç—Å—è –º–∞—Å—Å–∏–≤ –∑–Ω–∞—á–µ–Ω–∏–π');
        }
        break;

      case 'rating':
        if (typeof value === 'number') {
          if (value < question.scale.min || value > question.scale.max) {
            errors.push(`–ó–Ω–∞—á–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç ${question.scale.min} –¥–æ ${question.scale.max}`);
          }
        } else if (value !== null && value !== undefined) {
          errors.push('–û–∂–∏–¥–∞–µ—Ç—Å—è —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ');
        }
        break;

      case 'text':
      case 'textarea':
        if (typeof value === 'string') {
          if (question.validation?.minLength && value.length < question.validation.minLength) {
            errors.push(`–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞: ${question.validation.minLength} —Å–∏–º–≤–æ–ª–æ–≤`);
          }
          if (question.validation?.maxLength && value.length > question.validation.maxLength) {
            errors.push(`–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞: ${question.validation.maxLength} —Å–∏–º–≤–æ–ª–æ–≤`);
          }
          if (question.validation?.pattern) {
            const regex = new RegExp(question.validation.pattern);
            if (!regex.test(value)) {
              errors.push(question.validation.errorMessage || '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç');
            }
          }
        } else if (value !== null && value !== undefined) {
          errors.push('–û–∂–∏–¥–∞–µ—Ç—Å—è —Å—Ç—Ä–æ–∫–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ');
        }
        break;
    }

    return { isValid: errors.length === 0, errors };
  }

  /**
   * –ü—Ä–∏–≤–∞—Ç–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è —É—Å–ª–æ–≤–∏–π
   */
  private evaluateCondition(
    condition: any,
    currentValue: any,
    allAnswers: QuestionAnswer[]
  ): boolean {
    let valueToCheck = currentValue;

    // –ï—Å–ª–∏ —É—Å–ª–æ–≤–∏–µ —Å—Å—ã–ª–∞–µ—Ç—Å—è –Ω–∞ –¥—Ä—É–≥–æ–π –≤–æ–ø—Ä–æ—Å
    if (condition.questionId) {
      const targetAnswer = allAnswers.find(a => a.questionId === condition.questionId);
      valueToCheck = targetAnswer?.value;
    }

    if (valueToCheck === null || valueToCheck === undefined) {
      return false;
    }

    switch (condition.operator) {
      case 'equals':
        return valueToCheck === condition.value;
      case 'not_equals':
        return valueToCheck !== condition.value;
      case 'greater_than':
        return Number(valueToCheck) > Number(condition.value);
      case 'less_than':
        return Number(valueToCheck) < Number(condition.value);
      case 'greater_or_equal':
        return Number(valueToCheck) >= Number(condition.value);
      case 'less_or_equal':
        return Number(valueToCheck) <= Number(condition.value);
      case 'contains':
        return String(valueToCheck).includes(String(condition.value));
      case 'not_contains':
        return !String(valueToCheck).includes(String(condition.value));
      case 'in':
        return Array.isArray(condition.value) && condition.value.includes(valueToCheck);
      case 'not_in':
        return Array.isArray(condition.value) && !condition.value.includes(valueToCheck);
      default:
        return false;
    }
  }
}

export class SurveyResultEntity implements SurveyResult {
  id: string;
  surveyId: string;
  employeeId?: string | undefined;
  meetingId?: string | undefined;
  answers: QuestionAnswer[];
  status: SurveyResult['status'];
  startedAt: Date;
  completedAt?: Date | undefined;
  metadata?: SurveyResult['metadata'] | undefined;

  constructor(data: SurveyResult) {
    this.id = data.id;
    this.surveyId = data.surveyId;
    this.employeeId = data.employeeId || undefined;
    this.meetingId = data.meetingId || undefined;
    this.answers = data.answers || [];
    this.status = data.status;
    this.startedAt = data.startedAt;
    this.completedAt = data.completedAt || undefined;
    this.metadata = data.metadata || undefined;
  }

  /**
   * –î–æ–±–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç
   */
  addAnswer(answer: QuestionAnswer): void {
    // –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π –æ—Ç–≤–µ—Ç –Ω–∞ —Ç–æ—Ç –∂–µ –≤–æ–ø—Ä–æ—Å, –µ—Å–ª–∏ –µ—Å—Ç—å
    this.answers = this.answers.filter(a => a.questionId !== answer.questionId);
    this.answers.push({
      ...answer,
      timestamp: answer.timestamp || new Date()
    });
    
    this.status = 'in_progress';
  }

  /**
   * –ó–∞–≤–µ—Ä—à–∏—Ç—å –æ–ø—Ä–æ—Å
   */
  complete(): void {
    this.status = 'completed';
    this.completedAt = new Date();
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
    if (!this.metadata) this.metadata = {};
    this.metadata.duration = Math.round(
      (this.completedAt.getTime() - this.startedAt.getTime()) / 1000
    );
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–π –æ—Ç–≤–µ—Ç
   */
  getLastAnswer(): QuestionAnswer | null {
    return this.answers.length > 0 ? (this.answers[this.answers.length - 1] || null) : null;
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –≤–æ–ø—Ä–æ—Å
   */
  getAnswer(questionId: string): QuestionAnswer | null {
    return this.answers.find(a => a.questionId === questionId) || null;
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –æ—Ç–≤–µ—á–µ–Ω –ª–∏ –≤–æ–ø—Ä–æ—Å
   */
  hasAnswered(questionId: string): boolean {
    return this.answers.some(a => a.questionId === questionId);
  }
}
