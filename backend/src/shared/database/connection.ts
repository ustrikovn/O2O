/**
 * –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö PostgreSQL
 */

import pg from 'pg';
import dotenv from 'dotenv';
import { getDatabaseConfig } from '@/shared/config/database.js';

dotenv.config();

const { Pool } = pg;

// –°–æ–∑–¥–∞–Ω–∏–µ –ø—É–ª–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π
export const pool = new Pool(getDatabaseConfig());

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
pool.on('error', (err: Error) => {
  console.error('–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:', err);
  process.exit(-1);
});

/**
 * –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
 */
export async function connectDatabase(): Promise<boolean> {
  try {
    const client = await pool.connect();
    const result = await client.query('SELECT NOW()');
    console.log('üóÑÔ∏è  –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∞:', result.rows[0]?.now);
    client.release();
    return true;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö:', (error as Error).message);
    throw error;
  }
}

/**
 * –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ SQL –∑–∞–ø—Ä–æ—Å–∞
 */
export async function query(text: string, params?: any[]): Promise<pg.QueryResult> {
  const start = Date.now();
  try {
    const result = await pool.query(text, params);
    const duration = Date.now() - start;
    console.log('üîç –í—ã–ø–æ–ª–Ω–µ–Ω –∑–∞–ø—Ä–æ—Å:', { 
      text, 
      duration: `${duration}ms`, 
      rows: result.rowCount 
    });
    return result;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞:', { 
      text, 
      error: (error as Error).message 
    });
    throw error;
  }
}

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
 */
export async function getClient(): Promise<pg.PoolClient> {
  return await pool.connect();
}

/**
 * –ó–∞–∫—Ä—ã—Ç–∏–µ –ø—É–ª–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π
 */
export async function closeDatabase(): Promise<void> {
  await pool.end();
  console.log('üì™ –ü—É–ª –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π –∑–∞–∫—Ä—ã—Ç');
}
